
#user  root;
worker_processes  2;
error_log /dev/stdout info;
events {
    worker_connections  1024;
}


http {
    access_log /dev/stdout;
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  300s;

    gzip  on;
    gzip_min_length 1000;
    gzip_proxied    expired no-cache no-store private auth;
    gzip_types      text/css text/xml image/gif image/jpeg application/javascript text/plain image/avif image/png image/svg+xml image/tiff image/webp image/x-icon font/woff font/woff2 application/json application/pdf application/wasm audio/midi audio/mpeg audio/ogg audio/x-m4a audio/x-realaudio video/3gpp video/mp2t video/mp4 video/mpeg video/quicktime video/webm video/x-flv video/x-m4v video/x-mng video/x-ms-asf video/x-ms-wmv video/x-msvideo;


    init_by_lua_block {
      local salt = "authenticated encrypted cookie"
      local password="--SECRET_KEY_BASE--";


      db_conn_str=os.getenv("DATABASE_URL")
      
      request_path = require("request_path")
      local left, right = string.match(db_conn_str, "(%g+)@(%g+)")
      local user_pass = string.match(left, "//(%g+)")
      user, pass = string.match(user_pass, "(%g+):(%g+)")
      local host_port = string.match(right, "(%g+)/")


      local host, port = string.match(host_port, "(%g+):(%g+)")
      local db = string.match(right, "/(%g+)")

      --local pgmoon = require("pgmoon")
      --local pg = pgmoon.new({
      --  host = host,
      --  port = port,
      --  database = db,
      --  user = user,
       -- pool="default_pool"
      --})
    
      --assert(pg:connect())

      Session = require("session")
      session = Session:new({cookie_key="_evans_energy_session", salt=salt, password=password})
      -- session = Session:new({pg=pg, cookie_key="_evans_energy_session", salt=salt, password=password})
    }

    limit_req_zone $binary_remote_addr zone=rateLimit:10m rate=10r/s;

    server {
        listen       --PORT--;
        http2 on;


        server_name 127.0.0.1;
        more_set_headers 'resty: foobar';
        more_set_headers 'X-Content-Type-Options: nosniff';
        more_set_headers 'x-xss-protection: 1; mode=block'
        more_set_headers 'X-Frame-Option: DENY';
        more_set_headers 'Referrer-Policy: strict-origin-when-cross-origin';
        more_set_headers 'strict-transport-security: max-age=15768000'; 

        client_max_body_size 8m;

        root /mattermost; 
        
        # root /Users/evansenergy/src/mattermost_tmp/webapp/channels;
        # server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;




        access_by_lua_block {
            local headers = ngx.req.get_headers()
            
            for k, v in pairs(headers) do
              print("KEY " .. k .. "     " .. v)
            end

            local params = ngx.req.get_uri_args()

            if headers["x-forwarded-proto"] == "http" then
              ngx.redirect("https://" .. headers["host"] .. ngx.var.uri)
            end
        }

        location ^~ /static {
          try_files $uri $uri/ =404;
        }



        location ^~ /chat {

          access_by_lua_block {
            local admin_auth, admin_id, a_session_id = session:is_authenticated("warden.user.admin_user.key")

            if admin_auth == false then
              ngx.redirect("/login ")
              return
            end
          
          }
          
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_set_header  X-Forwarded-Proto $scheme;
          proxy_set_header  X-Forwarded-Port $server_port;
          proxy_set_header  X-Forwarded-Host $host;

          proxy_redirect off;
          proxy_pass http://127.0.0.1:8065;
        }

        location / {

          access_by_lua_block {
            local admin_auth, admin_id, a_session_id = session:is_authenticated("warden.user.admin_user.key")

            if auth == false and admin_auth == false then
              ngx.redirect("/login ")
              return
            end
          
          }
          
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_set_header  X-Forwarded-Proto $scheme;
          proxy_set_header  X-Forwarded-Port $server_port;
          proxy_set_header  X-Forwarded-Host $host;

          proxy_redirect off;
          proxy_pass http://127.0.0.1:8065;
        }
    }
}

